


<서블릿>  javax.servlet.Servlet
- 자바플랫폼에서 컴포넌트를 기반으로 한 웹 애플리케이션을 개발할때 사용.
- 스레드를 기반으로 하므로 웹 애플리케이션 운영에 효율적.
- 자바를 기반으로 하므로 자바 API를 모두 사용할 수 있다.
- 운영체제나 하드웨어에 영향을 받지 않으므로 
   한번 개발된 애플리케이션은 다양한 서버환경에서도 실행이 가능.
- 웹애플리케이션에서 효율적인 자료 공유 방법을 제공.
- JSP는 서블릿을 기반으로 한 기술.




<웹애플리케이션 개발 시 서블릿을 사용하면 좋은 점>
- 콘텐츠와 비즈니스 로직을 분리 할 수 있다.
- 컨트롤러와 뷰의 역할 분담으로 인해 웹 디자이너와 개발자 간의 원활한
   작업이 가능.
- 유지보수가 수월.
- 기능확장이 용이.



<서블릿 클래스의 상속관계>
  javax.servlet.Servlet(인터페이스)
              |
              |
  javax.servlet.GenericServlet(클래스)
              |
              |
  javax.servlet.http.HttpServlet(클래스)


http://www.eclipsetotale.com/tomcatPlugin.html (이클립스 마르스버전 지원)
----> Help메뉴 - MarketPlace클릭 (이클립스 neon버전부터)
      ---> tomcat plugin 검색
      ---> 인스톨
----> 이클립스에서 사용할 톰켓 플러그인을 지원

  
<서블릿의 생명주기 메소드> ★ Life Cycle
1. init()메소드
   - 서블릿 로딩
   - 서블릿 초기화 메소드
   
2. service()메소드
   - 웹브라우저 서비스 메소드
   - 클라이언트 요청에 따라 doGet()이나  doPost()메소드로 분기
   - 사용자요청처리는 request(요청객체,client)로 
              응답처리는 response(응답객체,server)객체로 처리함.
              
              
3. destroy()메소드
   - 컨테이너로부터 서블릿 종료요청이 있을때
     서블릿 종료직접에 해야할 작업을 명시할 때 사용.
   - 대부분의 경우 컨테이너가 종료될 때 실행.
 
<서블릿 실행방법>
1. http://192.168.0.147:8282/TomTest/servlet/com.kosta.t0501.MyServlet
   ----> 보안상 문제 발생 
   
2. web.xml에 작성된 서블릿 클래스를 등록.  
   ----> 서블릿에 가상의 경로를 매핑시켜서 호출.



   
   
   
<GET방식과 POST방식> - 클라이언트 기준!!
1. GET방식
   - 서버에 있는 정보를 가져오기 위해 설계된 방법
   - 경우에 따라 서버로 전달할 수 있는 데이터크기는 최대240byte.
   - QUERY_STRING을 통해서 서버로 데이터를 전달.
   예)
      http://192.168.0.147:8080/TomTest2/gildong/test.do
      http://192.168.0.147:8080/TomTest2/gildong/test.do?id=gildong&pass=1234
                                 
                             
      http://192.168.0.147:8080/gildong/hello.jsp?id=gildong&pass=1234
      
   - QUERY_STRING은 '속성=값' 형태를 갖고 두개이상의 속성인 경우
     '&'를 통해 구분.
   - URL이 노출되기 때문에 보안 문제가 발생할 수 있음.

2. POST방식
   - 서버로 정보를 올리기 위해 설계된 방법.(로그인폼,회원가입폼,회원수정폼)
   - 서버에 전달할 수 있는 데이터 크기는 제한이 없다.
   - URL에는 파라미터가 표시되지 않는다.(보안에 유리)
   
※ <페이지 이동시> 경로표현 방법 (form action="이동경로", location.href="이동경로")
 기준(현재페이지) ==> http://192.168.0.147:8282/TomTest/0501/login_form.html  
 HTML ----이동----> Servlet페이지

1. 전체경로
 <form action="http://192.168.0.147:8282/TomTest/0501/param"> 
 
2. 경로 맨앞에 '/'를 사용하는 경우  ===> '/': 서버루트 경로!!
                                       ===> http://192.168.0.147:8282
  <form action="/TomTest/0501/param">    
  
  ※web.xml에서 경로를 표시하는 경우  맨 앞의 '/'는  컨텍스트 루트 경로!!
                                        ===> http://192.168.0.147:8282/TomTest

3. 경로 맨앞에 '/'를 사용하지 않는 경우  ===> 현재페이지의 경로 가져오기
  <form action="param">
               ===> 현재페이지와 이동할 페이지의  (페이지를 제외한)경로가 일치하는 경우
------------------------------------------------------------------------------               
참고) 경로 '.' : 현재 경로
          경로  '..': 부모 경로
 기준(현재페이지) ==> http://192.168.0.147:8282/TomTest/0501/login_form.html
                                     ..        ..       .
   
  1. <form action="../param">
      ----> http://192.168.0.147:8282/TomTest/param
          
  2. <form action="../../param">
      ----> http://192.168.0.147:8282/param
                 
------------------------------------------------------------------------------
<Mission> 
- 서블릿으로 계산기 만들기(HTML사용X)
- 클래스명: CalcServlet 새로작성, 이전 Calculator사용 
 첫페이지) doGet 요청!!
 
              서블릿 계산기
   -----------------------------------
     su1    oper    su2     계산(버튼)  
 ==================================================== 
 두번째 페이지) doPost 숫자입력후 계산버튼을 클릭을 했을때
            
              서블릿 계산기
   -----------------------------------
     su1    oper    su2     계산(버튼)      
   -----------------------------------
            결과값 : 2+5=7  
     
참고) 
   주소표시줄에 URL입력, <a href="이동경로">, location.href="이동경로",
  <form action="이동경로"> ,  <form action="이동경로" method="get">
        ====> GET요청
        
  <form method="post">
        ====> POST요청   

   
   